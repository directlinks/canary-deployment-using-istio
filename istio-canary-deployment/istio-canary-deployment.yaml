# Create a Gateway to control ingress and egress traffic

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: flask-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"

---

# Create a VirtualService to define how the traffic is to be distributed

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: flask-virtualservice
spec:
  hosts:
  - "*"
  gateways:
  - flask-gateway
  http:
#   - route:
#     - destination:
#         host: lbservice
#         subset: subset-v1
#       weight: 100
#     - destination:
#         host: lbservice
#         subset: subset-v2
#       weight: 0
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: lbservice
        port:
          number: 80
        subset: subset-v1
      weight: 100
    - destination:
        host: lbservice
        port:
          number: 80
        subset: subset-v2
      weight: 0

---

# Create a Destination rule to specify where the traffic needs to go

apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: flask-destinationrule
spec:
  host: lbservice
  subsets:
  - name: subset-v1
    labels:
      version: v1
  - name: subset-v2
    labels:
      version: v2
  
